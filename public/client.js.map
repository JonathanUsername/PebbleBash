{"version":3,"sources":["../client/app.js","../client/base-ctrl.js","../client/client.js","../client/loading.js","../client/player.js","../client/send.js","../client/socket.js","../client/waiting-ctrl.js"],"names":[],"mappings":"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","file":"client.js","sourcesContent":["const app = angular.module('pebble-bash', ['ui.router'])\n\napp.run((\n  $rootScope,\n  $state,\n  $window,\n  $log,\n  $stateParams,\n  $q\n) => {\n  $rootScope.$on('$stateChangeError', $log.log.bind($log));\n\n  $rootScope.$state = $state;\n  $rootScope.$stateParams = $stateParams;\n\n  console.log('starting module')\n\n})","app.controller('baseCtrl', \n  ($scope, $rootScope, $state, $stateParams, socket, apiService, Player, loading) => {\n\n    console.log('starting controller')\n\n    $scope.newGame = function() {\n      const url = '/room/new';\n      apiService.send(url)\n        .then(data => {\n          if (data.error) {\n            return alert(data.error)\n          }\n          $state.go('waiting', data)\n        })\n    }\n\n    $scope.player = Player;\n\n    loading.start();\n    socket.on('connect', () => {\n      console.log('socket connected');\n      Player.id = socket.getId();\n      loading.finish();\n    })\n\n  })\n\nangular.module('pebble-bash').config(function (\n  $stateProvider,\n  $urlRouterProvider\n) {\n\n  // Default route is base\n  $urlRouterProvider.otherwise('/');\n\n  $stateProvider\n    .state('base', {\n      url: '/',\n      controller: 'baseCtrl',\n      templateUrl: 'base.html'\n    });\n});\n","// const LIMIT = 5;\n\n// const socket = io();\n// const indicator = $('#indicator');\n\n// if (!window.DeviceMotionEvent) {\n//   alert('Device motion is not supported! You can\\'t have any fun, sorry.');\n// }\n\n// if (localStorage.name) {\n//   $('#name').val(localStorage.name);\n// }\n\n// $('#newGame').click(newGame);\n// $('#joinGame').click(joinGame);\n// $('#startGame').click(startGame);\n// $('#lose').click(lose);\n// // $('.playAgain').click(playAgain);\n\n// function send (url, data) {\n//   const params = data ? data : {};\n\n//   const name = $('#name').val();\n//   localStorage.name = name;\n\n//   params.name = name;\n//   params.playerId = socket.id;\n\n//   return $.ajax(url, {\n//     method: 'POST',\n//     data: params\n//   });\n// }\n\n// function newGame () {\n//   const url = '/room/new';\n//   send(url)\n//     .done(data => {\n//       $('.starting-info').hide();\n//       $('#gameName').text(`Your game name is: ${data.roomId}`)\n//       localStorage.gameName = data.roomId;\n//       $('.waiting').show();\n//     })\n// }\n\n// function joinGame () {\n//   const url = '/room/' + $('#gameId').val();\n//   send(url)\n//     .done(data => {\n//       if (data.error) {\n//         alert(room.error)\n//       } else {\n//         $('.starting-info').hide();\n//         $('#gameName').text(`Your game name is: ${data.roomId}`)\n//         localStorage.gameName = data.roomId;\n//         $('.waiting').show();\n//       }\n//     })\n//   $('gameId').val();\n// }\n\n// function changeState (nextState) {\n\n// }\n\n// let currentState;\n// currentState = 'initial';\n\n// const state = {\n//   initial: () => {\n//     $('.starting-info').show();\n//     $('#win-screen').hide();\n//     $('#lose-screen').hide();\n//     $('#gameName').text('');\n//     $('.waiting').hide();\n//   },\n//   waitingRoom: () => {\n//     $('.starting-info').hide();\n//     $('#gameName').text(`Your game name is: ${data.roomId}`)\n//     $('.waiting').show();\n//   },\n//   playing: () => {\n\n//   },\n//   won: () => {\n\n//   },\n//   lost: () => {\n\n//   }\n// }\n\n\n// function startGame () {\n\n//   // const name = $('#name').val();\n\n//   // if (!name) return alert('You must tell me who you are!');\n\n//   window.addEventListener('devicemotion', listener, false);\n\n//   indicator.addClass('alive').show();\n\n//   socket.on('gameover', data => {\n//     window.removeEventListener('devicemotion', listener, false)\n//     console.log(data)\n//     console.log(socket.id)\n//     var winner = data.winner;\n//     var won = isWinner(data);\n//     if (won) {\n//       winner = 'YOU';\n//       $('#win-screen').show();\n//     } else {\n//       $('#lose-screen').show();\n//     }\n//     indicator.removeClass('alive')\n//       .removeClass('loser')\n//       .text('')\n//       .hide();\n//   })\n// }\n\n// function isWinner(data) {\n//   return data.winnerId === socket.id\n// }\n\n\n// function listener(ev) {\n//   if (!ev.acceleration) return;\n//   const acc = ev.acceleration;\n//   jogHandler(acc.x, acc.y, acc.z);\n// }\n\n// function jogHandler(x, y, z) {\n//   const arr = [x, y, z]\n//   if (arr.filter(overTheLimit).length > 0) {\n//     lose(listener);\n//   }\n// }\n\n// function overTheLimit(coord) {\n//   if (coord > LIMIT) {\n//       return true;\n//   }\n//   return false;\n// }\n\n// function lose() {\n//   window.removeEventListener('devicemotion', listener, false);\n//   indicator.removeClass('alive').addClass('loser').text('LOSER');\n//   socket.emit('loser', {\n//     id: socket.id\n//   })\n//   window.navigator.vibrate(500);\n// }","app.factory('loading', function () {\n  var loading = false;\n  return {\n    isLoading: function () {\n      return loading;\n    },\n    start: function () {\n      loading = true;\n    },\n    finish: function () {\n      loading = false\n    }\n  };\n})","app.factory('Player', function (\n  $http,\n  $q,\n  $log,\n  $rootScope,\n  socket,\n  loading\n) {\n\n  const Player = {\n    id: '',\n    name: ''\n  };\n\n  Player.getId = () => this.id;\n  Player.getName = () => this.name;\n\n  return Player\n})","\napp.factory('apiService', function (\n  $http,\n  $q,\n  $log,\n  $rootScope,\n  socket,\n  loading,\n  Player\n) {\n\n  return {\n    send: (url, data) => {\n\n      const deferred = $q.defer();\n\n      loading.start();\n\n      const params = data ? data : {};\n\n      params.name = Player.name;\n      params.playerId = Player.id;\n\n      localStorage.playerName = Player.name;\n      \n      $http.post(url, params).then((resp) => {\n        loading.finish();\n        deferred.resolve(resp.data);\n      }, (err) => {\n        loading.finish();\n        alert(err.data.message);\n        deferred.reject();\n      });\n\n      return deferred.promise;\n    }\n  }\n\n})\n","app.factory('socket', function ($rootScope) {\n  var socket = io.connect();\n  return {\n    on: function (eventName, callback) {\n      socket.on(eventName, function () {  \n        var args = arguments;\n        $rootScope.$apply(function () {\n          callback.apply(socket, args);\n        });\n      });\n    },\n    emit: function (eventName, data, callback) {\n      socket.emit(eventName, data, function () {\n        var args = arguments;\n        $rootScope.$apply(function () {\n          if (callback) {\n            callback.apply(socket, args);\n          }\n        });\n      })\n    },\n    getId: function() {\n      return socket.id;\n    }\n  };\n});","// app.controller('baseCtrl', \n//   ($scope, $rootScope, $state, $stateParams, socket, apiService) => {\n\n//     console.log('starting controller')\n\n//     $scope.newGame = function() {\n//       const url = '/room/new';\n//       apiService.send(url)\n//         .then(data => {\n//           if (data.error) {\n//             return alert(data.error)\n//           }\n          \n//           alert('success!', JSON.stringify(data))\n//         })\n//     }\n\n//     $scope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){ \n//       console.log('in $stateChangeStart'); \n//     })\n//     $scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams){ \n//       console.log('in $stateChangeSuccess'); \n//     })\n//     $scope.$on('$stateChangeError', function(event, toState, toParams, fromState, fromParams){ \n//       console.log('in $stateChangeError'); \n//     })\n\n//     $rootScope.playerName = localStorage.name || '';\n//     $rootScope.playerId = 'Connecting to server...';\n//     $rootScope.testing = 'rootScope visible';\n\n//     socket.on('connect', () => {\n//       console.log('connected');\n//       $rootScope.playerId = socket.getId();\n//     })\n\n//   })\n\n// angular.module('pebble-bash').config(function (\n//   $stateProvider,\n//   $urlRouterProvider\n// ) {\n\n//   // Default route is base\n//   $urlRouterProvider.otherwise('/');\n\n//   $stateProvider\n//     .state('base', {\n//       url: '/:roomId',\n//       controller: 'baseCtrl',\n//       templateUrl: 'base.html'\n//     });\n// });\n"]}